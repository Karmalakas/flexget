#
# Author: Christian Alexander <alexforsale@yahoo.com>
#
variables: secrets.yml

templates:

  global:
    # all tasks will stop if the remaining space for the paths below is lacking
    # of 5000mb
    free_space:
      path: '{? media.partition ?}'
      space: 5000
    pathscrub: windows
    no_entries_ok: yes

  reject:
    regexp:
      reject:
        - (s|d)ub(s|bed|lado|titulado)?\b
        - \bdual\b
        - \b3d\b
        - \b(fr)(ench)?\b
        - \b(ita)(lian)?\b
        - \b(spa)(nish)?\b
        - \b(ger)(man)?\b
        - \bcastellano\b
        - \bportugese?\b
        - \btruefrench?\b
        - \blatin(o)?\b
        - msd
        - afg
        - hc
        - korsub
        - -evo\b
    content_filter:
      reject:
        - '*.zip'

  torrents:
    torrent_alive:
      min_seeds: 3
      reject_for: 15 minutes

  rss-searches-global:
    _rss-searches-series-lt: &rss-searches-series-lt
      - search_rss: '{? jackett.trl.url|replace("__CAT__", jackett.trl.cat_tv_lt) ?}{{ search_term }}'
      - search_rss: '{? jackett.lm.url|replace("__CAT__", jackett.lm.cat_tv_lt) ?}{{ search_term }}'
    _rss-searches-movies-lt: &rss-searches-movies-lt
      - search_rss: '{? jackett.trl.url|replace("__CAT__", jackett.trl.cat_movies_lt) ?}{{ search_term }}'
      - search_rss: '{? jackett.lm.url|replace("__CAT__", jackett.lm.cat_movies_lt) ?}{{ search_term }}'
    _rss-searches-series: &rss-searches-series
      - search_rss: '{? jackett.trl.url|replace("__CAT__", jackett.trl.cat_tv_hd) ?}{{ search_term }}'
      - search_rss: '{? jackett.lm.url|replace("__CAT__", jackett.lm.cat_tv_hd) ?}{{ search_term }}'
      - search_rss: '{? jackett.tpb.url|replace("__CAT__", jackett.tpb.cat_tv_hd) ?}{{ search_term }}'
      - search_rss:
          url: '{? jackett.rarbg.url|replace("__CAT__", jackett.rarbg.cat_tv_hd) ?}{{ search_term }}'
          link: guid
      - search_rss: '{? jackett.torrentcouch.url|replace("__CAT__", jackett.torrentcouch.cat_tv) ?}{{ search_term }}'
      - search_rss: '{? jackett.zooqle.url|replace("__CAT__", jackett.zooqle.cat_tv_hd) ?}{{ search_term }}'
    _rss-searches-movies: &rss-searches-movies
      - search_rss: '{? jackett.trl.url|replace("__CAT__", jackett.trl.cat_movies_hd) ?}{{ search_term }}'
      - search_rss: '{? jackett.lm.url|replace("__CAT__", jackett.lm.cat_movies_hd) ?}{{ search_term }}'
      - search_rss: '{? jackett.tpb.url|replace("__CAT__", jackett.tpb.cat_movies_hd) ?}{{ search_term }}'
      - search_rss:
          url: '{? jackett.rarbg.url|replace("__CAT__", jackett.rarbg.cat_movies_hd) ?}{{ search_term }}'
          link: guid
      - search_rss: '{? jackett.zooqle.url|replace("__CAT__", jackett.zooqle.cat_movies_hd) ?}{{ search_term }}'

  series-settings-global:
    _series-settings: &series-settings
      quality: 720p|1080p hdtv+ h264+ dd5.1+
      identified_by: ep
      propers: yes
      tracking: no

  series-from:
    _series-from: &series-from
      trakt_list:
        account: '{? trakt.account ?}'
        list: watchlistshows
        type: shows

  series-settings-episodes:
    _series-settings-episodes: &series-settings-episodes
      configure_series:
        settings:
          <<: *series-settings
          season_packs: no
        from: *series-from

  series-settings-packs:
    _series-settings-packs: &series-settings-packs
      configure_series:
        settings:
          <<: *series-settings
          season_packs: only
        from: *series-from

  series-global:
    _series-setup: &series-setup
      metainfo_series: yes
      imdb_lookup: yes
      thetvdb_lookup: yes
      trakt_lookup: yes
      exists_series:
        path: '{? files_watch.series ?}'
      assume_quality:
        720p+ hdtv+ h264+: ac3
      upgrade:
        tracking: yes
        timeframe: 5 days
        propers: yes
        on_lower: reject
      list_match:
        from:
          - *series-from
        remove_on_match: no
      sort_by:
        - field: quality.resolution
          reverse: yes

  series-seasons:
    <<: [*series-setup, *series-settings-packs]
    priority: 1
    discover:
      what:
        - next_series_seasons:
            threshold: 3
      from: *rss-searches-series
      interval: 15 minutes
    content_size:
      max: 55000
      min: 15000
      strict: no

  series-episodes:
    <<: [*series-setup, *series-settings-episodes]
    priority: 2
    discover:
      what:
        - next_series_episodes: yes
      from: *rss-searches-series
      interval: 15 minutes
    content_size:
      max: 3500
      min: 850
      strict: no

  movies:
    imdb_lookup: yes
    exists_movie:
      path: '{? files_watch.movies ?}'
    quality: 1080p+ hdtv+ h264+ dd5.1+
    assume_quality:
      1080p bluray h264: dts
    upgrade:
      tracking: yes
      timeframe: 6 weeks
      propers: yes
      on_lower: reject
    sort_by:
      - field: quality.resolution
        reverse: yes

  qbittorrent-global:
    _qbittorrent-settings: &qbittorrent-settings
      host: '{? qbt.host ?}'
      port: '{? qbt.port ?}'
      label: '{? qbt.label ?}'
    retry_failed:
      retry_time: 5 seconds
      retry_time_multiplier: 1
      max_retries: 2

  qbittorrent-series:
    qbittorrent:
      <<: *qbittorrent-settings
      path: '{? staging.series ?}{{series_name|replace("(", "")|replace(")", "")|replace(" ",".")|pathscrub}}/'

  qbittorrent-movies:
    qbittorrent:
      <<: *qbittorrent-settings
      path: '{? staging.movies ?}{{movie_name|replace("(", "")|replace(")", "")|replace(" ",".")|pathscrub}}'

  qbittorrent-series-lt:
    qbittorrent:
      <<: *qbittorrent-settings
      label: '{? qbt.label_lt ?}'
      path: '{? staging.lt ?}series/{{movie_name|replace("(", "")|replace(")", "")|replace(" ",".")|pathscrub}}'

  qbittorrent-movies-lt:
    qbittorrent:
      <<: *qbittorrent-settings
      label: '{? qbt.label_lt ?}'
      path: '{? staging.lt ?}movies/{{movie_name|replace("(", "")|replace(")", "")|replace(" ",".")|pathscrub}}'

  notifiers-global:
    _notifiers: &notifiers
      - join:
          api_key: '{? join_api.key ?}'
          device_name: 'Pixel 2'
          url: '{? qbt.remote ?}'
          icon: '{% if imdb_photo %}{{ imdb_photo }}{% elif tvdb_posters %}{{ tvdb_posters.0 }}{% else %}"https://avatars2.githubusercontent.com/u/682553"{% endif %}'
          priority: 0

  series-notify:
    notify:
      entries:
        title: Series added for download
        message: '{% if series_name is defined %}{{ trakt_series_name|d(series_name) }} {{series_id|d()}} {{trakt_ep_name|d()}}{% elif tvdb_series_name is defined %}{{tvdb_series_name}} {{tvdb_ep_id|d()}} ({{tvdb_network}}){% elif title is defined %}{{ title }}{% endif %}'
        via: *notifiers

  movies-notify:
    notify:
      entries:
        title: Movie added for download
        message: '{% if imdb_name is defined %}{{imdb_name}} {{imdb_year}}{% elif title is defined %}{{ title }}{% endif %}'
        via: *notifiers

  movies-notify-lt:
    notify:
      entries:
        title: '[LT] Movie added for download'
        message: '{% if imdb_name is defined %}{{imdb_name}} {{imdb_year}}{% elif title is defined %}{{ title }}{% endif %}'
        via: *notifiers

  movies-notify-mom:
    notify:
      entries:
        title: Filmas pridÄ—tas parsiuntimui
        message: |
          <strong>{% if imdb_name is defined %}{{imdb_name}} {{imdb_year}}{% elif title is defined %}{{ title }}{% endif %}</strong><br/><br/>
          {% if imdb_photo %}<img src="{{ imdb_photo }}"/>{% elif tvdb_posters %}<img src="{{ tvdb_posters.0 }}"/>{% endif %}
        via:
          - email:
              smtp_host: '{? smtp_settings.host ?}'
              smtp_port: '{? smtp_settings.port ?}'
              smtp_username: '{? smtp_settings.user ?}'
              smtp_password: '{? smtp_settings.pass ?}'
              from: '{? email.from ?}'
#              to: '{? email.mom ?}'
              to: 'mantas@kacinskas.lt'
              html: yes
              autofrom: yes

tasks:
  versioncheck:
    version_checker:
      check_for_dev_version: yes
      interval: 1 days

  discover-series-episodes:
    template:
      - series-episodes
      - torrents
      - qbittorrent-series
      - reject
      - series-notify

  discover-series-packs:
    template:
      - series-seasons
      - torrents
      - qbittorrent-series
      - reject
      - series-notify

  discover-movies:
    template:
      - movies
      - torrents
      - qbittorrent-movies
      - reject
      - movies-notify
    discover:
      what:
        - trakt_list:
            account: '{? trakt.account ?}'
            list: watchlist
            type: movies
      from: *rss-searches-movies
      release_estimations:
        optimistic: 6 weeks
      interval: 90 minutes
    content_size:
      max: 20000
      min: 3500
      strict: no

  discover-movies-mom:
    template:
      - torrents
      - qbittorrent-movies-lt
      - reject
#      - movies-notify-mom
      - movies-notify-lt
    seen: local
    imdb_lookup: yes
    exists_movie:
      path: '{? files_watch.lt ?}'
      type: files
    quality: 720p+ webrip+ h264+ aac+
    assume_quality:
      720p+ bluray h264: ac3
    upgrade:
      tracking: yes
      timeframe: 6 weeks
      propers: yes
      on_lower: reject
    discover:
      what:
        - trakt_list:
            account: '{? trakt.acc_mom ?}'
            list: watchlist
            type: movies
      from: *rss-searches-movies-lt
      release_estimations:
        optimistic: 6 weeks
      interval: 90 minutes
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc_mom ?}'
            list: watchlist
            type: movies
      remove_on_match: no
    content_size:
      max: 20000
      min: 2000
      strict: no
    sort_by:
      - field: quality.resolution
        reverse: yes

  check-collected-movies:
    disable:
      - seen_info_hash
      - exists_movies
    seen: local
    template:
      - movies
    filesystem:
      path: '{? folder.movies ?}'
      retrieve:
        - files
        - dirs
      recursive: yes
      regexp: '.*\.(avi|mkv|mp4|m4v|iso)$'
    accept_all: yes
    list_add:
      - trakt_list:
          account: '{? trakt.account ?}'
          list: collection
          type: movies

  series-trakt-set-begin:
    next_trakt_episodes:
      account: '{? trakt.account ?}'
      list: watchlistshows
      position: next
    accept_all: yes
    set_series_begin: yes
    disable: seen

schedules:
  - tasks:
    - check-collected-movies
    interval:
      weeks: 1
  - tasks:
    - versioncheck
    interval:
      days: 1
  - tasks:
    - series-trakt-set-begin
    interval:
      hours: 3
  - tasks:
    - discover-movies
    - discover-movies-mom
    interval:
      hours: 2
  - tasks:
    - discover-series-*
    interval:
      minutes: 20